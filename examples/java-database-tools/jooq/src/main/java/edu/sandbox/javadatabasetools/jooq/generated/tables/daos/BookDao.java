/*
 * This file is generated by jOOQ.
 */
package edu.sandbox.javadatabasetools.jooq.generated.tables.daos;


import edu.sandbox.javadatabasetools.jooq.generated.tables.Book;
import edu.sandbox.javadatabasetools.jooq.generated.tables.records.BookRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Repository
public class BookDao extends DAOImpl<BookRecord, edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Book, Long> {

    /**
     * Create a new BooksDao without any configuration
     */
    public BookDao() {
        super(Book.BOOK, edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Book.class);
    }

    /**
     * Create a new BooksDao with an attached configuration
     */
    @Autowired
    public BookDao(Configuration configuration) {
        super(Book.BOOK, edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Book.class, configuration);
    }

    @Override
    public Long getId(edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Book object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Book> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Book.BOOK.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Book> fetchById(Long... values) {
        return fetch(Book.BOOK.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Book fetchOneById(Long value) {
        return fetchOne(Book.BOOK.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Book> fetchOptionalById(Long value) {
        return fetchOptional(Book.BOOK.ID, value);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Book> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Book.BOOK.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Book> fetchByTitle(String... values) {
        return fetch(Book.BOOK.TITLE, values);
    }

    /**
     * Fetch records that have <code>author_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Book> fetchRangeOfAuthorId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Book.BOOK.AUTHOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>author_id IN (values)</code>
     */
    public List<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Book> fetchByAuthorId(Long... values) {
        return fetch(Book.BOOK.AUTHOR_ID, values);
    }

    /**
     * Fetch a unique record that has <code>author_id = value</code>
     */
    public edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Book fetchOneByAuthorId(Long value) {
        return fetchOne(Book.BOOK.AUTHOR_ID, value);
    }

    /**
     * Fetch a unique record that has <code>author_id = value</code>
     */
    public Optional<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Book> fetchOptionalByAuthorId(Long value) {
        return fetchOptional(Book.BOOK.AUTHOR_ID, value);
    }
}
