/*
 * This file is generated by jOOQ.
 */
package edu.sandbox.javadatabasetools.jooq.generated.tables;


import edu.sandbox.javadatabasetools.jooq.generated.Keys;
import edu.sandbox.javadatabasetools.jooq.generated.Public;
import edu.sandbox.javadatabasetools.jooq.generated.tables.records.BookGenreRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class BookGenre extends TableImpl<BookGenreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.books_genres</code>
     */
    public static final BookGenre BOOK_GENRE = new BookGenre();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookGenreRecord> getRecordType() {
        return BookGenreRecord.class;
    }

    /**
     * The column <code>public.books_genres.id</code>.
     */
    public final TableField<BookGenreRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.books_genres.book_id</code>.
     */
    public final TableField<BookGenreRecord, Long> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.books_genres.genre_id</code>.
     */
    public final TableField<BookGenreRecord, Long> GENRE_ID = createField(DSL.name("genre_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private BookGenre(Name alias, Table<BookGenreRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookGenre(Name alias, Table<BookGenreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.books_genres</code> table reference
     */
    public BookGenre(String alias) {
        this(DSL.name(alias), BOOK_GENRE);
    }

    /**
     * Create an aliased <code>public.books_genres</code> table reference
     */
    public BookGenre(Name alias) {
        this(alias, BOOK_GENRE);
    }

    /**
     * Create a <code>public.books_genres</code> table reference
     */
    public BookGenre() {
        this(DSL.name("books_genres"), null);
    }

    public <O extends Record> BookGenre(Table<O> child, ForeignKey<O, BookGenreRecord> key) {
        super(child, key, BOOK_GENRE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<BookGenreRecord, Long> getIdentity() {
        return (Identity<BookGenreRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BookGenreRecord> getPrimaryKey() {
        return Keys.BOOKS_GENRES_PKEY;
    }

    @Override
    public List<UniqueKey<BookGenreRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.BOOKS_GENRES_BOOK_ID_GENRE_ID_KEY);
    }

    @Override
    public List<ForeignKey<BookGenreRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BOOKS_GENRES__BOOKS_GENRES_BOOK_ID_FKEY, Keys.BOOKS_GENRES__BOOKS_GENRES_GENRE_ID_FKEY);
    }

    private transient Book _books;
    private transient Genre _genres;

    /**
     * Get the implicit join path to the <code>public.books</code> table.
     */
    public Book books() {
        if (_books == null)
            _books = new Book(this, Keys.BOOKS_GENRES__BOOKS_GENRES_BOOK_ID_FKEY);

        return _books;
    }

    /**
     * Get the implicit join path to the <code>public.genres</code> table.
     */
    public Genre genres() {
        if (_genres == null)
            _genres = new Genre(this, Keys.BOOKS_GENRES__BOOKS_GENRES_GENRE_ID_FKEY);

        return _genres;
    }

    @Override
    public BookGenre as(String alias) {
        return new BookGenre(DSL.name(alias), this);
    }

    @Override
    public BookGenre as(Name alias) {
        return new BookGenre(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookGenre rename(String name) {
        return new BookGenre(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookGenre rename(Name name) {
        return new BookGenre(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
