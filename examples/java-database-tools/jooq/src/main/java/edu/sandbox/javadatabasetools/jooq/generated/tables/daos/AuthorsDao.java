/*
 * This file is generated by jOOQ.
 */
package edu.sandbox.javadatabasetools.jooq.generated.tables.daos;


import edu.sandbox.javadatabasetools.jooq.generated.tables.Authors;
import edu.sandbox.javadatabasetools.jooq.generated.tables.records.AuthorsRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Repository
public class AuthorsDao extends DAOImpl<AuthorsRecord, edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Authors, Long> {

    /**
     * Create a new AuthorsDao without any configuration
     */
    public AuthorsDao() {
        super(Authors.AUTHORS, edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Authors.class);
    }

    /**
     * Create a new AuthorsDao with an attached configuration
     */
    @Autowired
    public AuthorsDao(Configuration configuration) {
        super(Authors.AUTHORS, edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Authors.class, configuration);
    }

    @Override
    public Long getId(edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Authors object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Authors> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Authors.AUTHORS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Authors> fetchById(Long... values) {
        return fetch(Authors.AUTHORS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Authors fetchOneById(Long value) {
        return fetchOne(Authors.AUTHORS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Authors> fetchOptionalById(Long value) {
        return fetchOptional(Authors.AUTHORS.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Authors> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Authors.AUTHORS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Authors> fetchByName(String... values) {
        return fetch(Authors.AUTHORS.NAME, values);
    }
}
