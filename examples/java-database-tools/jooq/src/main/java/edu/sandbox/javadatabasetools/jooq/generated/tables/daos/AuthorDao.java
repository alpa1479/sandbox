/*
 * This file is generated by jOOQ.
 */
package edu.sandbox.javadatabasetools.jooq.generated.tables.daos;


import edu.sandbox.javadatabasetools.jooq.generated.tables.Author;
import edu.sandbox.javadatabasetools.jooq.generated.tables.records.AuthorRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Repository
public class AuthorDao extends DAOImpl<AuthorRecord, edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Author, Long> {

    /**
     * Create a new AuthorsDao without any configuration
     */
    public AuthorDao() {
        super(Author.AUTHOR, edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Author.class);
    }

    /**
     * Create a new AuthorsDao with an attached configuration
     */
    @Autowired
    public AuthorDao(Configuration configuration) {
        super(Author.AUTHOR, edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Author.class, configuration);
    }

    @Override
    public Long getId(edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Author object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Author> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Author.AUTHOR.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Author> fetchById(Long... values) {
        return fetch(Author.AUTHOR.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Author fetchOneById(Long value) {
        return fetchOne(Author.AUTHOR.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Author> fetchOptionalById(Long value) {
        return fetchOptional(Author.AUTHOR.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Author> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Author.AUTHOR.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.Author> fetchByName(String... values) {
        return fetch(Author.AUTHOR.NAME, values);
    }
}
