/*
 * This file is generated by jOOQ.
 */
package edu.sandbox.javadatabasetools.jooq.generated.tables.daos;


import edu.sandbox.javadatabasetools.jooq.generated.tables.BookGenre;
import edu.sandbox.javadatabasetools.jooq.generated.tables.records.BookGenreRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Repository
public class BookGenreDao extends DAOImpl<BookGenreRecord, edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.BookGenre, Long> {

    /**
     * Create a new BooksGenresDao without any configuration
     */
    public BookGenreDao() {
        super(BookGenre.BOOK_GENRE, edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.BookGenre.class);
    }

    /**
     * Create a new BooksGenresDao with an attached configuration
     */
    @Autowired
    public BookGenreDao(Configuration configuration) {
        super(BookGenre.BOOK_GENRE, edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.BookGenre.class, configuration);
    }

    @Override
    public Long getId(edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.BookGenre object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.BookGenre> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(BookGenre.BOOK_GENRE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.BookGenre> fetchById(Long... values) {
        return fetch(BookGenre.BOOK_GENRE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.BookGenre fetchOneById(Long value) {
        return fetchOne(BookGenre.BOOK_GENRE.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.BookGenre> fetchOptionalById(Long value) {
        return fetchOptional(BookGenre.BOOK_GENRE.ID, value);
    }

    /**
     * Fetch records that have <code>book_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.BookGenre> fetchRangeOfBookId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(BookGenre.BOOK_GENRE.BOOK_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>book_id IN (values)</code>
     */
    public List<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.BookGenre> fetchByBookId(Long... values) {
        return fetch(BookGenre.BOOK_GENRE.BOOK_ID, values);
    }

    /**
     * Fetch records that have <code>genre_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.BookGenre> fetchRangeOfGenreId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(BookGenre.BOOK_GENRE.GENRE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>genre_id IN (values)</code>
     */
    public List<edu.sandbox.javadatabasetools.jooq.generated.tables.pojos.BookGenre> fetchByGenreId(Long... values) {
        return fetch(BookGenre.BOOK_GENRE.GENRE_ID, values);
    }
}
